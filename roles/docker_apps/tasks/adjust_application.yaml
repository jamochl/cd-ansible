# Get config onto host
- name: "Synchronize config {{ item }}"
  ansible.builtin.copy:
    src: "{{ pwd }}/apps/{{ item }}"
    dest: "{{ config_dir }}"
    decrypt: true
    mode: '0644'
  register: synchronize_status

- name: "Adjust application {{ item }}"
  vars:
    env_contents: |
      APP_DATA_DIR="{{ app_data_dir }}"
      APP_CONFIG_DIR="{{ app_config_dir }}"
  block:
    # Ensure .env file exists in config dir
    - name: ".env file exists"
      ansible.builtin.file:
        path: "{{ app_config_dir }}/.env"
        state: touch
        mode: u=rw,g=r,o=r

    # Ensure APP_DATA_DIR and APP_CONFIG_DIR are added to the .env files
    - name: Ensure .env file contains DATA and CONFIG directories
      ansible.builtin.lineinfile:
        path: "{{ app_config_dir }}/.env"
        regex: "{{ env_contents }}"
        insertafter: 'EOF'
        line: "{{ env_contents }}"

    # Patch
    - name: "Patch app {{ item }}"
      community.docker.docker_compose:
        project_src: "{{ app_config_dir }}"
        project_name: "{{ item }}"
        build: true
        pull: true
        remove_orphans: true
        recreate: always
        restarted: true
        state: present
      when: app_state == "patch"

    # Deploy
    - name: "Deploy app {{ item }}"
      community.docker.docker_compose:
        project_src: "{{ app_config_dir }}"
        project_name: "{{ item }}"
        build: false
        remove_orphans: true
        recreate: smart
        restarted: false
        state: present
      when: app_state == "deploy" and not synchronize_status.changed

    # Redeploy
    - name: "Redeploy app {{ item }}"
      community.docker.docker_compose:
        project_src: "{{ app_config_dir }}"
        project_name: "{{ item }}"
        build: true
        pull: true
        remove_orphans: true
        recreate: always
        restarted: true
        state: present
      when: app_state == "deploy" and synchronize_status.changed

    # Destroy
    - name: "Destroy App"
      when: app_state == "destroy"
      block:
        - name: "Destroy app {{ item }}"
          community.docker.docker_compose:
            project_src: "{{ app_config_dir }}"
            project_name: "{{ item }}"
            remove_orphans: true
            remove_volumes: "{{ delete_volumes }}"
            state: absent

        - name: "Delete app data directory for {{ item }}"
          ansible.builtin.file:
            path: "{{ app_data_dir }}"
            state: absent
          when: delete_volumes

        - name: "Delete app config directory for {{ item }}"
          ansible.builtin.file:
            path: "{{ app_config_dir }}"
            state: absent
          when: delete_volumes
